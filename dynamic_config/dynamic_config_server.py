"""Controller for the DynamicConfigManager process."""

from test.integration.subprocess_mixin import SubprocessMixin
from rules_python.python.runfiles import runfiles
import base64
import os
from os.path import exists
import time
import logging


class DynamicConfigController(SubprocessMixin):
  """Controller for the Dynamic Configuration Manager.

  Manages the subprocess used to generate Dynamic Configuration.
  See SubprocessMixin for usage.
  """

  def __init__(self, dynamic_config_settings):
    """Create DynamicConfigController."""
    super().__init__()
    runfiles_instance = runfiles.Create()
    self.binary_path = runfiles_instance.Rlocation(
        'nighthawk/dynamic_config/dynamic_config_manager')
    self.settings = dynamic_config_settings

  def _argsForSubprocess(self) -> list[str]:
    return [
        self.binary_path, '--config',
        str(base64.b64encode(self.settings.SerializeToString()), 'UTF-8')
    ]

  def start(self):
    """Start the DynamicConfigManager process.

    Returns:
        Bool: whether the process has started.
    """
    if exists(self.settings.output_file):
      os.remove(self.settings.output_file)
    logging.info(f"Launching subprocess with args {self._argsForSubprocess()}")
    self.launchSubprocess()
    time.sleep(self.settings.refresh_interval.ToSeconds() + 10)
    logging.info("Checking configuration file exists.")
    assert exists(self.settings.output_file), \
        f"Expected configuration file f{self.settings.output_file} to have been generated by the child process."
    return True

  def stop(self):
    """Stop the DynamicConfigManager process.

    Returns:
        Int: exit code of the server process.
    """
    return self.stopSubprocess()
